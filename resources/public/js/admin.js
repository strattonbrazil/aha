// Generated by CoffeeScript 1.4.0
(function() {
  var AdminViewModel, Menu, ready,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  $.contextMenu({
    selector: '.right-click-edit',
    build: function($trigger, e) {
      console.log($trigger[0]);
      console.log($trigger);
      console.log(e);
      return {
        callback: function(key, options) {
          var m;
          m = "clicked: " + key;
          return window.console && console.log(m) || alert(m);
        },
        items: {
          "edit": {
            name: "Change Image",
            icon: "edit"
          }
        }
      };
    }
  });

  Menu = (function() {

    function Menu(adminVM, menuData) {
      this._createPage = __bind(this._createPage, this);

      this.editPage = __bind(this.editPage, this);

      this.newPage = __bind(this.newPage, this);

      var _this = this;
      this._adminVM = adminVM;
      this.id = menuData.id;
      this.name = menuData.title;
      this.pages = ko.observableArray(menuData.pages);
      this.pages.menuId = this.id;
      this.orderChanged = function(movedInfo) {
        var pageId;
        pageId = movedInfo.item.id;
        return _this._movePage(pageId, movedInfo.sourceParent.menuId, movedInfo.sourceIndex, movedInfo.targetParent.menuId, movedInfo.targetIndex);
      };
    }

    Menu.prototype._movePage = function(pageId, srcMenuId, srcIndex, targetMenuId, targetIndex) {
      return $.ajax({
        type: "PATCH",
        url: "/pages/" + pageId + "/order",
        data: {
          srcMenuId: srcMenuId,
          srcIndex: srcIndex,
          targetMenuId: targetMenuId,
          targetIndex: targetIndex
        },
        success: function() {
          return console.log('moved');
        }
      });
    };

    Menu.prototype.newPage = function(viewmodel, event) {
      return this.editPage();
    };

    Menu.prototype.editPage = function(page, event) {
      var dialogElement, editDialog, editVM, pageName, title,
        _this = this;
      if (page == null) {
        page = {};
      }
      if (page.title != null) {
        pageName = page.title;
      } else {
        pageName = 'new_page';
      }
      editDialog = $('#edit-page-dialog');
      editVM = {
        name: ko.observable(pageName),
        editMode: page.id != null,
        remove: function() {
          var removeDialog, removeDialogElement, removeVM;
          removeDialogElement = document.getElementById('remove-dialog');
          removeDialog = $(removeDialogElement).dialog({
            title: 'Delete Page',
            modal: true,
            close: function() {
              return ko.cleanNode(removeDialogElement);
            }
          });
          removeVM = {
            name: pageName,
            remove: function() {
              _this._removePage(page.id);
              removeDialog.dialog('close');
              return editDialog.dialog('close');
            }
          };
          return ko.applyBindings(removeVM, removeDialogElement);
        }
      };
      if (page.id != null) {
        title = 'Edit Page';
      } else {
        title = 'New Page';
      }
      dialogElement = document.getElementById('edit-page-dialog');
      ko.applyBindings(editVM, dialogElement);
      return $(dialogElement).dialog({
        title: title,
        modal: true,
        close: function() {
          if (page.id != null) {
            if (editVM.name() !== pageName) {
              _this._updatePageName(page.id, editVM.name());
            }
          } else {
            _this._createPage(editVM.name());
          }
          return ko.cleanNode(dialogElement);
        }
      });
    };

    Menu.prototype._createPage = function(name) {
      return $.post("/pages", {
        title: name,
        menuId: this.id
      }, this._adminVM._requestPages);
    };

    return Menu;

  })();

  AdminViewModel = (function() {

    function AdminViewModel() {
      this._createPage = __bind(this._createPage, this);

      this.newPage = __bind(this.newPage, this);

      this._createMenu = __bind(this._createMenu, this);

      this.newMenu = __bind(this.newMenu, this);

      this.editMenu = __bind(this.editMenu, this);

      this._requestPages = __bind(this._requestPages, this);
      this.menus = ko.observableArray();
      this._requestPages();
    }

    AdminViewModel.prototype._requestPages = function() {
      var parseResponse,
        _this = this;
      parseResponse = function(data) {
        var menuData, _i, _len, _ref, _results;
        _this.menus.removeAll();
        _ref = data.menus;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          menuData = _ref[_i];
          _results.push(_this.menus.push(new Menu(_this, menuData)));
        }
        return _results;
      };
      return $.getJSON("/menus", parseResponse);
    };

    AdminViewModel.prototype.editMenu = function(menu, event) {
      var dialogElement, editDialog, editVM, menuName, title,
        _this = this;
      if (menu == null) {
        menu = {};
      }
      if (menu.title != null) {
        menuName = menu.title;
      } else {
        menuName = 'new_menu';
      }
      editDialog = $('#edit-menu-dialog');
      editVM = {
        name: ko.observable(menuName),
        editMode: menu.id != null,
        remove: function() {
          var removeDialog, removeDialogElement, removeVM;
          removeDialogElement = document.getElementById('remove-dialog');
          removeDialog = $(removeDialogElement).dialog({
            title: 'Delete Menu',
            modal: true,
            close: function() {
              return ko.cleanNode(removeDialogElement);
            }
          });
          removeVM = {
            name: menuName,
            remove: function() {
              _this._removeMenu(menu.id);
              removeDialog.dialog('close');
              return editDialog.dialog('close');
            }
          };
          return ko.applyBindings(removeVM, removeDialogElement);
        }
      };
      if (menu.id != null) {
        title = 'Edit Menu';
      } else {
        title = 'New Menu';
      }
      dialogElement = document.getElementById('edit-menu-dialog');
      ko.applyBindings(editVM, dialogElement);
      return $(dialogElement).dialog({
        title: title,
        modal: true,
        close: function() {
          if (menu.id != null) {
            if (editVM.name() !== menuName) {
              _this._updateMenuName(menu.id, editVM.name());
            }
          } else {
            _this._createMenu(editVM.name());
          }
          return ko.cleanNode(dialogElement);
        }
      });
    };

    AdminViewModel.prototype._updateMenuName = function(id, name) {
      return $.ajax({
        type: "PATCH",
        url: "/menus/" + id,
        data: {
          title: name
        },
        success: this._requestPages
      });
    };

    AdminViewModel.prototype._removeMenu = function(id) {
      return $.ajax({
        type: "DELETE",
        url: "/menus/" + id,
        success: this._requestPages
      });
    };

    AdminViewModel.prototype.newMenu = function() {
      return this.editMenu();
    };

    AdminViewModel.prototype._createMenu = function(name) {
      return $.post("/menus", {
        title: name
      }, this._requestPages);
    };

    AdminViewModel.prototype.newPage = function() {
      return this.editPage();
    };

    AdminViewModel.prototype._createPage = function(name) {
      return $.post("/pages", {
        title: name
      }, this._requestPages);
    };

    return AdminViewModel;

  })();

  ready = function() {
    return ko.applyBindings(new AdminViewModel(), document.getElementById('main-content'));
  };

  $(document).ready(ready);

  $(document).on('page:load', ready);

}).call(this);
